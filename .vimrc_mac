"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"     make a VIM IDE for myself -- Feng Guoqing
"
" Sections:
"    -> General
"    -> Text, tab and indent related
"    -> vimgrep searching
"    -> Colors and Fonts
"    -> Editing mappings
"    -> Plugin Settings
"
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => General
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Pathogen settings.Easy manipulation of 'runtimepath', 'path', 'tags', etc
filetype off
call pathogen#incubate()


" Make vim incompatbile to vi.
set nocompatible
set modelines=0

set showmode
set showcmd

set hidden
set wildmenu
set wildmode=list:longest

set scrolloff=3

set ttyfast
set ruler
set backspace=indent,eol,start
set laststatus=2

set number
set norelativenumber

set shell=/bin/bash
set lazyredraw
set matchtime=3

highlight ColorColumn ctermbg=darkgrey
let &colorcolumn='120'

set runtimepath^=~/.vim/bundle/ctrlp.vim

set rtp+=~/.vim/bundle/Vundle.vim

call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
" call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo

Plugin 'tpope/vim-fugitive'

" for C++ clang-format tool
Plugin 'rhysd/vim-clang-format'

" for python PEP8 coding style tool
Plugin 'nvie/vim-flake8'

" for directory side window
Plugin 'scrooloose/nerdtree'

" for syntax highlight
Plugin 'sheerun/vim-polyglot'

" for clang_complete
Plugin 'Rip-Rip/clang_complete'

" All of your Plugins must be added before the following line
call vundle#end()            " required
" Enable filetype plugins
filetype plugin indent on

  
"Changing Leader Key
let mapleader = ","

" Set title to window
set title

" Enable Mouse
set mouse=a

" Dictionary path, from which the words are being looked up.
set dictionary=/usr/share/dict/words

" Make pasting done without any indentation break."
set pastetoggle=<F11>

" Make Vim able to edit corntab fiels again.
set backupskip=/tmp/*,/private/tmp/*"

" disable the auto-initialization jedi
let g:jedi#auto_initialization = 0

" Make Vim to handle long lines nicely.
set wrap
set textwidth=79
set formatoptions=qrn1
"set colorcolumn=79

" To  show special characters in Vim
set listchars=tab:>-,trail:-,eol:$

" Turn backup off, since most stuff is in SVN, git et.c anyway...
set nobackup
"set nowb
"set noswapfile



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Text, tab and indent related
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"TAB settings.
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab
set autoindent



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => vimgrep searching
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set ignorecase
set smartcase
set gdefault
set incsearch
set showmatch
set hlsearch



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Colors and Fonts
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Enable syntax highlighting
syntax enable

colorscheme koehler
"colorscheme default
"set background=dark

" Set extra options when running in GUI mode
if has("gui_running")
    set guioptions-=T
    set guioptions+=e
    set t_Co=256
    set guitablabel=%M\ %t
endif

" Set utf8 as standard encoding and en_US as the standard language
set encoding=utf8

" Use Unix as the standard file type
set ffs=unix,dos,mac



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Editing mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Settings for Searching and Moving
nnoremap / /\v
vnoremap / /\v

nnoremap <leader><space> :noh<cr>
nnoremap <tab> %
vnoremap <tab> %

" Naviagations using keys up/down/left/right
" Disabling default keys to learn the hjkl
nnoremap j gj
nnoremap k gk

" Rope settings."
"inoremap <leader>j <ESC>:RopeGotoDefinition<cr>

" Get Rid of stupid Goddamned help keys
inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>

" Map : to ; also in command mode.
nnoremap ; :

" Adding More Shorcuts keys using leader kye.
" Leader Kye provide separate namespace for specific commands.
",W Command to remove white space from a file.
nnoremap <leader>W :%s/\s\+$//<cr>:let @/=''<CR>

" ,ft Fold tag, helpful for HTML editing.
nnoremap <leader>ft vatzf

" ,q Re-hardwrap Paragraph
nnoremap <leader>q gqip

" ,v Select just pasted text.
nnoremap <leader>v V`]

" ,ev Shortcut to edit .vimrc file on the fly on a vertical window.
nnoremap <leader>ev <C-w><C-v><C-l>:e $MYVIMRC<cr>

" jj For Qicker Escaping between normal and editing mode.
"inoremap jj <ESC>

nnoremap g; g;zz

" Working with split screen nicely
" Resize Split When the window is resized"
au VimResized * :wincmd =



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Plugin Settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"自动补全
"filetype plugin indent off
set completeopt=longest,menu

"""""""""""""""""""""""""""""""
" Wildmenu completion
"""""""""""""""""""""""""""""""
set wildmenu
set wildmode=list:longest
set wildignore+=.hg,.git,.svn " Version Controls"
set wildignore+=*.aux,*.out,*.toc "Latex Indermediate files"
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg "Binary Imgs"
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest "Compiled Object files"
set wildignore+=*.spl "Compiled speolling world list"
set wildignore+=*.sw? "Vim swap files"
set wildignore+=*.DS_Store "OSX SHIT"
set wildignore+=*.luac "Lua byte code"
set wildignore+=migrations "Django migrations"
set wildignore+=*.pyc "Python Object codes"
set wildignore+=*.orig "Merge resolution files"

" Make Sure that Vim returns to the same line when we reopen a file"
augroup line_return
    au!
    au BufReadPost *
        \ if line("'\"") > 0 && line("'\"") <= line("$") |
        \ execute 'normal! g`"zvzz' |
        \ endif
augroup END

"""""""""""""""""""""""""""""""
" Mapping to NERDTree
"""""""""""""""""""""""""""""""
nnoremap <C-n> :NERDTreeToggle<cr>
nmap <silent> <F8> :NERDTreeToggle<cr>:TlistToggle<CR>
let NERDTreeIgnore=['\.vim$', '\~$', '\.pyc$','cscope\.*','.*\.swp$']
let g:NERDTreeMouseMode = 2
let g:NERDTreeWinSize = 20

"""""""""""""""""""""""""""""""
" Minibuffer
"""""""""""""""""""""""""""""""
let g:miniBufExplMapWindowNavVim = 1 
let g:miniBufExplMapWindowNavArrows = 1 
let g:miniBufExplMapCTabSwitchBufs = 1 
let g:miniBufExplModSelTarget = 1
let g:miniBufExplMoreThanOne=0
let g:miniBufExplUseSingleClick = 1
"let g:miniBufExplVSplit = 25
"let g:miniBufExplSplitBelow=1
"autocmd BufRead,BufNew :call UMiniBufExplorer

"""""""""""""""""""""""""""""""
"Hide some files
"""""""""""""""""""""""""""""""
let g:explHideFiles='^\.,.*\.class$,.*\.swp$,.*\.pyc$,.*\.swo$,\.DS_Store$'
"Hide the help thing..
let g:explDetailedHelp=0

"""""""""""""""""""""""""""""""
" Rope Plugin settings
"""""""""""""""""""""""""""""""
"imap <leader>j <ESC>:RopeGotoDefinition<cr>
"nmap <leader>j <ESC>:RopeGotoDefinition<cr>

"""""""""""""""""""""""""""""""
" Tagbar key bindings."
"""""""""""""""""""""""""""""""
"nmap <leader>l <ESC>:TagbarToggle<cr>
"imap <leader>l <ESC>:TagbarToggle<cr>i

"""""""""""""""""""""""""""""""
"winmanager plugin settings
"""""""""""""""""""""""""""""""
let g:NERDTree_title="[NERDTree]"
let g:winManagerWindowLayout="NERDTree|MiniBufExpl,TagList"

function! NERDTree_Start()
    exec 'NERDTree'
endfunction

function! NERDTree_IsValid()
      return 1
endfunction

let g:AutoOpenWinManager=0
nmap wm :WMToggle<CR>:q<CR>

"""""""""""""""""""""""""""""""
" Taglist plugin settings
"""""""""""""""""""""""""""""""
let Tlist_Show_One_File=1
nnoremap <silent> <F7> :TlistToggle<CR>
"设置标签子窗口的宽度
let Tlist_Use_Right_Window = 1
let Tlist_WinWidth = 25
"标签列表窗口显示或隐藏不影响整个gvim窗口大小
let Tlist_Inc_Winwidth=0
let Tlist_Exit_OnlyWindow = 1
let Tlist_Use_SingleClick = 1

"""""""""""""""""""""""""""""""
"auto save and load session
"""""""""""""""""""""""""""""""
let g:AutoSessionFile=".project.vim"
let g:OrigPWD=getcwd()

if filereadable(g:AutoSessionFile)
	au VimEnter * call EnterHandler()
	au VimLeave * call LeaveHandler()
endif

function! LeaveHandler()
	exec "mks!".g:OrigPWD."/".g:AutoSessionFile
endfunction

function!  EnterHandler()
	exe "source ".g:AutoSessionFile
endfunction

"""""""""""""""""""""""""""""""
"cscope plugin setting
"""""""""""""""""""""""""""""""
if has("cscope")
    set csprg=/usr/local/bin/cscope
    set cscopequickfix=s-,c-,d-,i-,t-,e-  
	set csto=1
	set cst
	set nocsverb
    " add any database in current directory
	if filereadable("cscope.out")
		cs add cscope.out
    endif
	set csverb
endif

"查找C语言符号，即查找函数名、宏、枚举值等出现的地方
nmap <C-_>s :cs find s <C-R>=expand("<cword>")<CR><CR>

"查找调用本函数的函数
nmap <F5> :cs find c <C-R>=expand("<cword>")<CR><CR>

"查找指定的字符串
nmap <F6> :cs find t <C-R>=expand("<cword>")<CR><CR>

"查找函数、宏、枚举等定义的位置，类似ctags所提供的功能
nmap <F7> :cs find g <C-R>=expand("<cword>")<CR><CR>

"查找egrep模式，相当于egrep功能，但查找速度快多了
nmap <C-_>e :cs find e <C-R>=expand("<cword>")<CR><CR>

"查找并打开文件，类似vim的find功能
nmap <C-_>f :cs find f <C-R>=expand("<cfile>")<CR><CR>

"查找包含本文件的文件
nmap <C-_>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>

"查找本函数调用的函数
nmap <C-_>d :cs find d <C-R>=expand("<cword>")<CR><CR>

"create and update cscope and  project file
nmap <F9> :!find . -iname '*.c' -o -iname '*.cpp' -o -iname '*.h' -o -iname '*.hpp' -o -iname '*.pl' -o -iname '*.py' > cscope.files<CR>
  \:!cscope -Rkbq -i cscope.files -f cscope.out<CR>
  \:cs kill -1<CR>:cs add cscope.out<CR>
  \:!ctags -R<CR>

map ,pt :%! perltidy<CR>

"""""""""""""""""""""""""""""""
" quickfix plugin settings
"""""""""""""""""""""""""""""""
autocmd FileType c,cpp map <buffer> <leader><space> :w<cr>:make<cr>
"nmap <silent> <F6> :cw 10<cr>
nmap <silent> <F2> :cp<cr>
nmap <silent> <F3> :cn<cr>
"nmap <silent> <leader>lv :lv /<c-r>=expand("<cword>")<cr>/%<cr>:lw<cr>
map <silent> <leader>/ :cclose<cr>

"""""""""""""""""""""""""""""""
"PreviewWord plugin settings
"""""""""""""""""""""""""""""""
nmap <silent> <F4> :call PreviewWord()<cr>
nmap <silent> <C-F4> <ESC>:pclose<cr>

func! PreviewWord()
if &previewwindow " 不要在预览窗口里执行
     return  
 endif
 let w = expand("<cword>") " 在当前光标位置抓词
 let cwin = winnr()
 if w =~ '\a' " 如果该单词包括一个字母
      try
        exe "botright ptag " . w
   catch
         return
    endtry 
   silent! wincmd P "跳转至预览窗口
      if &previewwindow " 如果确实转到了预览窗口……
      if has("folding")
         silent! .foldopen "展开折叠的行
       endif
         call search("$", "b") " 到前一行的行尾
       let w = substitute(w, '\\', '\\\\', "")
         call search('\<\V' . w . '\>') "定位光标在匹配的单词上
       "给在此位置的单词加上匹配高亮
         hi previewWord term=bold ctermbg=green 
       exe 'match previewWord "\%' . line(".") . 'l\%' . col(".") . 'c\k*"'
      endif
  endif
  exe cwin."wincmd w"
  endfun

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Settings for clang-format plugin
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let g:clang_format#detect_style_file = 1
" map to <Leader>cf in C++ code
autocmd FileType c,cpp,objc nnoremap <buffer><Leader>cf :<C-u>ClangFormat<CR>
autocmd FileType c,cpp,objc vnoremap <buffer><Leader>cf :ClangFormat<CR>
" if you install vim-operator-user
autocmd FileType c,cpp,objc map <buffer><Leader>x <Plug>(operator-clang-format)
" Toggle auto formatting:
nmap <Leader>C :ClangFormatAutoToggle<CR>

"""""""""""""""""""""""""""""""""""""""""""""""highlight ColorColumn ctermbg=darkgrey
let &colorcolumn='120'
""""""""""""""""""""""""""""""""
" Settings for nerd tree plugin
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Stick this in your vimrc to open NERDTree with Ctrl+n
map <C-n> :NERDTreeToggle<CR>
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Settings for polyglot plugin
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let g:cpp_class_scope_highlight = 1
let g:cpp_member_variable_highlight = 1
let g:cpp_class_decl_highlight = 1
let g:cpp_experimental_simple_template_highlight = 1
let g:cpp_experimental_template_highlight = 1

" path to directory where library can be found
let g:clang_library_path = '/usr/local/opt/llvm/lib/libclang.dylib'
let g:clang_format#command = "/usr/local/opt/llvm/bin/clang-format"

" =========== END Plugin Settings =========="
"
